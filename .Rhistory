rawmomtest(z)
rawmomtest(z2)
library(sandwich)
# Test (a0 test by Knueppel)
# z is a sequence of normal transformed PITs
# nm is the highest moment order to be used
rawmomtest = function(z, nm = 4){
nm = 4 # Number of moments (must be even number)
odd = (1:nm)[seq(from = 1, by = 2, length.out = 0.5*nm)] # odd moments
ev = (1:nm)[seq(from = 2, by = 2, length.out = 0.5*nm)] # even moments
rm = c(0, 1, 0, 3, 0, 15, 0, 105) # Expected values for moments of N(0, 1)
stat = 0
dat = matrix(0, length(z), nm)
for (k in 1:nm){
dat[, k] = z^k - rm[k]
}
d1 = matrix(colMeans(dat[, odd]), 0.5*nm)
d2 = matrix(colMeans(dat[, ev]), 0.5*nm)
v1 = matrix(NeweyWest(lm(dat[, odd] ~ 1)), 0.5*nm, 0.5*nm)
v2 = matrix(NeweyWest(lm(dat[, ev] ~ 1)), 0.5*nm, 0.5*nm)
stat1 = t(d1) %*% solve(v1) %*% d1 # stat for odd moments
stat2 = t(d2) %*% solve(v2) %*% d2 # stat for even moments
stat = stat1 + stat2
pv = 1 - pchisq(stat, nm)
return(list(stat = stat, pvalue = pv, stat.odd = stat1, stat.even = stat2))
}
# Simulate data
n = 1000
h = 4
a = 0.8
s = 0.4
nz = n - h
e = s*rnorm(n)
y = c(0, rep(NA, n-1))
for (j in 2:n) y[j] = a*y[j-1] + e[j]
# PITs for correct forecasts
# Forecast variance
aux = sum((s^2) * (a ^ (0 : (h-1)))^2)
# PITs (correctly specified)
u = pnorm(y[(h+1):n], m = (a^h)*y[1:(n-h)], s = sqrt(aux))
# Normal transforms
z = qnorm(u)
# PITs (misspecified)
u2 = pnorm(y[(h+1):n], m = (a^h)*y[1:(n-h)] + 0.05, s = sqrt(aux))
# Normal transforms
z2 = qnorm(u2)
rawmomtest(z)
rawmomtest(z2)
library(sandwich)
# Test (a0 test by Knueppel)
# z is a sequence of normal transformed PITs
# nm is the highest moment order to be used
rawmomtest = function(z, nm = 4){
nm = 4 # Number of moments (must be even number)
odd = (1:nm)[seq(from = 1, by = 2, length.out = 0.5*nm)] # odd moments
ev = (1:nm)[seq(from = 2, by = 2, length.out = 0.5*nm)] # even moments
rm = c(0, 1, 0, 3, 0, 15, 0, 105) # Expected values for moments of N(0, 1)
stat = 0
dat = matrix(0, length(z), nm)
for (k in 1:nm){
dat[, k] = z^k - rm[k]
}
d1 = matrix(colMeans(dat[, odd]), 0.5*nm)
d2 = matrix(colMeans(dat[, ev]), 0.5*nm)
v1 = matrix(NeweyWest(lm(dat[, odd] ~ 1)), 0.5*nm, 0.5*nm)
v2 = matrix(NeweyWest(lm(dat[, ev] ~ 1)), 0.5*nm, 0.5*nm)
stat1 = t(d1) %*% solve(v1) %*% d1 # stat for odd moments
stat2 = t(d2) %*% solve(v2) %*% d2 # stat for even moments
stat = stat1 + stat2
pv = 1 - pchisq(stat, nm)
return(list(stat = stat, pvalue = pv, stat.odd = stat1, stat.even = stat2))
}
# Simulate data
n = 1000
h = 4
a = 0.8
s = 0.4
nz = n - h
e = s*rnorm(n)
y = c(0, rep(NA, n-1))
for (j in 2:n) y[j] = a*y[j-1] + e[j]
# PITs for correct forecasts
# Forecast variance
aux = sum((s^2) * (a ^ (0 : (h-1)))^2)
# PITs (correctly specified)
u = pnorm(y[(h+1):n], m = (a^h)*y[1:(n-h)], s = sqrt(aux))
# Normal transforms
z = qnorm(u)
# PITs (misspecified)
u2 = pnorm(y[(h+1):n], m = (a^h)*y[1:(n-h)], s = sqrt(aux))
# Normal transforms
z2 = qnorm(u2)
rawmomtest(z)
rawmomtest(z2)
library(sandwich)
# Test (a0 test by Knueppel)
# z is a sequence of normal transformed PITs
# nm is the highest moment order to be used
rawmomtest = function(z, nm = 4){
nm = 4 # Number of moments (must be even number)
odd = (1:nm)[seq(from = 1, by = 2, length.out = 0.5*nm)] # odd moments
ev = (1:nm)[seq(from = 2, by = 2, length.out = 0.5*nm)] # even moments
rm = c(0, 1, 0, 3, 0, 15, 0, 105) # Expected values for moments of N(0, 1)
stat = 0
dat = matrix(0, length(z), nm)
for (k in 1:nm){
dat[, k] = z^k - rm[k]
}
d1 = matrix(colMeans(dat[, odd]), 0.5*nm)
d2 = matrix(colMeans(dat[, ev]), 0.5*nm)
v1 = matrix(NeweyWest(lm(dat[, odd] ~ 1)), 0.5*nm, 0.5*nm)
v2 = matrix(NeweyWest(lm(dat[, ev] ~ 1)), 0.5*nm, 0.5*nm)
stat1 = t(d1) %*% solve(v1) %*% d1 # stat for odd moments
stat2 = t(d2) %*% solve(v2) %*% d2 # stat for even moments
stat = stat1 + stat2
pv = 1 - pchisq(stat, nm)
return(list(stat = stat, pvalue = pv, stat.odd = stat1, stat.even = stat2))
}
# Simulate data
n = 1000
h = 4
a = 0.8
s = 0.4
nz = n - h
e = s*rnorm(n)
y = c(0, rep(NA, n-1))
for (j in 2:n) y[j] = a*y[j-1] + e[j]
# PITs for correct forecasts
# Forecast variance
aux = sum((s^2) * (a ^ (0 : (h-1)))^2)
# PITs (correctly specified)
u = pnorm(y[(h+1):n], m = (a^h)*y[1:(n-h)], s = sqrt(aux))
# Normal transforms
z = qnorm(u)
# PITs (misspecified)
u2 = pnorm(y[(h+1):n], m = (a^h)*y[1:(n-h)], s = sqrt(aux + 0.2))
# Normal transforms
z2 = qnorm(u2)
rawmomtest(z)
rawmomtest(z2)
var(u)
var(u2)
var(z)
var(z2)
library(sandwich)
# Test (a0 test by Knueppel)
# z is a sequence of normal transformed PITs
# nm is the highest moment order to be used
rawmomtest = function(z, nm = 4){
nm = 4 # Number of moments (must be even number)
odd = (1:nm)[seq(from = 1, by = 2, length.out = 0.5*nm)] # odd moments
ev = (1:nm)[seq(from = 2, by = 2, length.out = 0.5*nm)] # even moments
rm = c(0, 1, 0, 3, 0, 15, 0, 105) # Expected values for moments of N(0, 1)
stat = 0
dat = matrix(0, length(z), nm)
for (k in 1:nm){
dat[, k] = z^k - rm[k]
}
d1 = matrix(colMeans(dat[, odd]), 0.5*nm)
d2 = matrix(colMeans(dat[, ev]), 0.5*nm)
v1 = matrix(NeweyWest(lm(dat[, odd] ~ 1)), 0.5*nm, 0.5*nm)
v2 = matrix(NeweyWest(lm(dat[, ev] ~ 1)), 0.5*nm, 0.5*nm)
stat1 = t(d1) %*% solve(v1) %*% d1 # stat for odd moments
stat2 = t(d2) %*% solve(v2) %*% d2 # stat for even moments
stat = stat1 + stat2
pv = 1 - pchisq(stat, nm)
return(list(stat = stat, pvalue = pv, stat.odd = stat1, stat.even = stat2))
}
# Simulate data
n = 1000
h = 4
a = 0.8
s = 0.4
nz = n - h
e = s*rnorm(n)
y = c(0, rep(NA, n-1))
for (j in 2:n) y[j] = a*y[j-1] + e[j]
# PITs for correct forecasts
# Forecast variance
aux = sum((s^2) * (a ^ (0 : (h-1)))^2)
# PITs (correctly specified)
u = pnorm(y[(h+1):n], m = (a^h)*y[1:(n-h)], s = sqrt(aux))
# Normal transforms
z = qnorm(u)
# PITs (misspecified)
u2 = pnorm(y[(h+1):n], m = (a^h)*y[1:(n-h)], s = sqrt(aux + 0.2))
# Normal transforms
z2 = qnorm(u2)
rawmomtest(z, nm = 8)
rawmomtest(z2, nm = 8)
library(sandwich)
# Test (a0 test by Knueppel)
# z is a sequence of normal transformed PITs
# nm is the highest moment order to be used
rawmomtest = function(z, nm = 4){
nm = 4 # Number of moments (must be even number)
odd = (1:nm)[seq(from = 1, by = 2, length.out = 0.5*nm)] # odd moments
ev = (1:nm)[seq(from = 2, by = 2, length.out = 0.5*nm)] # even moments
rm = c(0, 1, 0, 3, 0, 15, 0, 105) # Expected values for moments of N(0, 1)
stat = 0
dat = matrix(0, length(z), nm)
for (k in 1:nm){
dat[, k] = z^k - rm[k]
}
d1 = matrix(colMeans(dat[, odd]), 0.5*nm)
d2 = matrix(colMeans(dat[, ev]), 0.5*nm)
v1 = matrix(NeweyWest(lm(dat[, odd] ~ 1)), 0.5*nm, 0.5*nm)
v2 = matrix(NeweyWest(lm(dat[, ev] ~ 1)), 0.5*nm, 0.5*nm)
stat1 = t(d1) %*% solve(v1) %*% d1 # stat for odd moments
stat2 = t(d2) %*% solve(v2) %*% d2 # stat for even moments
stat = stat1 + stat2
pv = 1 - pchisq(stat, nm)
return(list(stat = stat, pvalue = pv, stat.odd = stat1, stat.even = stat2))
}
# Simulate data
n = 1000
h = 4
a = 0.8
s = 0.4
nz = n - h
e = s*rnorm(n)
y = c(0, rep(NA, n-1))
for (j in 2:n) y[j] = a*y[j-1] + e[j]
# PITs for correct forecasts
# Forecast variance
aux = sum((s^2) * (a ^ (0 : (h-1)))^2)
# PITs (correctly specified)
u = pnorm(y[(h+1):n], m = (a^h)*y[1:(n-h)], s = sqrt(aux))
# Normal transforms
z = qnorm(u)
# PITs (misspecified)
u2 = pnorm(y[(h+1):n], m = (a^h)*y[1:(n-h)], s = sqrt(aux + 0.2))
# Normal transforms
z2 = qnorm(u2)
rawmomtest(z, nm = 6)
rawmomtest(z2, nm = 6)
library(sandwich)
# Test (a0 test by Knueppel)
# z is a sequence of normal transformed PITs
# nm is the highest moment order to be used
rawmomtest = function(z, nm = 4){
nm = 4 # Number of moments (must be even number)
odd = (1:nm)[seq(from = 1, by = 2, length.out = 0.5*nm)] # odd moments
ev = (1:nm)[seq(from = 2, by = 2, length.out = 0.5*nm)] # even moments
rm = c(0, 1, 0, 3, 0, 15, 0, 105) # Expected values for moments of N(0, 1)
stat = 0
dat = matrix(0, length(z), nm)
for (k in 1:nm){
dat[, k] = z^k - rm[k]
}
d1 = matrix(colMeans(dat[, odd]), 0.5*nm)
d2 = matrix(colMeans(dat[, ev]), 0.5*nm)
v1 = matrix(NeweyWest(lm(dat[, odd] ~ 1)), 0.5*nm, 0.5*nm)
v2 = matrix(NeweyWest(lm(dat[, ev] ~ 1)), 0.5*nm, 0.5*nm)
stat1 = t(d1) %*% solve(v1) %*% d1 # stat for odd moments
stat2 = t(d2) %*% solve(v2) %*% d2 # stat for even moments
stat = stat1 + stat2
pv = 1 - pchisq(stat, nm)
return(list(stat = stat, pvalue = pv, stat.odd = stat1, stat.even = stat2))
}
# Simulate data
n = 1000
h = 4
a = 0.8
s = 0.4
nz = n - h
e = s*rnorm(n)
y = c(0, rep(NA, n-1))
for (j in 2:n) y[j] = a*y[j-1] + e[j]
# PITs for correct forecasts
# Forecast variance
aux = sum((s^2) * (a ^ (0 : (h-1)))^2)
# PITs (correctly specified)
u = pnorm(y[(h+1):n], m = (a^h)*y[1:(n-h)], s = sqrt(aux))
# Normal transforms
z = qnorm(u)
# PITs (misspecified)
u2 = pnorm(y[(h+1):n], m = (a^h)*y[1:(n-h)], s = sqrt(aux + 0.2))
# Normal transforms
z2 = qnorm(u2)
rawmomtest(z, nm = 6)
rawmomtest(z2, nm = 6)
library(sandwich)
# Test (a0 test by Knueppel)
# z is a sequence of normal transformed PITs
# nm is the highest moment order to be used
rawmomtest = function(z, nm = 4){
nm = 4 # Number of moments (must be even number)
odd = (1:nm)[seq(from = 1, by = 2, length.out = 0.5*nm)] # odd moments
ev = (1:nm)[seq(from = 2, by = 2, length.out = 0.5*nm)] # even moments
rm = c(0, 1, 0, 3, 0, 15, 0, 105) # Expected values for moments of N(0, 1)
stat = 0
dat = matrix(0, length(z), nm)
for (k in 1:nm){
dat[, k] = z^k - rm[k]
}
d1 = matrix(colMeans(dat[, odd]), 0.5*nm)
d2 = matrix(colMeans(dat[, ev]), 0.5*nm)
v1 = matrix(NeweyWest(lm(dat[, odd] ~ 1)), 0.5*nm, 0.5*nm)
v2 = matrix(NeweyWest(lm(dat[, ev] ~ 1)), 0.5*nm, 0.5*nm)
stat1 = t(d1) %*% solve(v1) %*% d1 # stat for odd moments
stat2 = t(d2) %*% solve(v2) %*% d2 # stat for even moments
stat = stat1 + stat2
pv = 1 - pchisq(stat, nm)
return(list(stat = stat, pvalue = pv, stat.odd = stat1, stat.even = stat2))
}
# Simulate data
n = 1000
h = 4
a = 0.8
s = 0.4
nz = n - h
e = s*rnorm(n)
y = c(0, rep(NA, n-1))
for (j in 2:n) y[j] = a*y[j-1] + e[j]
# PITs for correct forecasts
# Forecast variance
aux = sum((s^2) * (a ^ (0 : (h-1)))^2)
# PITs (correctly specified)
u = pnorm(y[(h+1):n], m = (a^h)*y[1:(n-h)], s = sqrt(aux))
# Normal transforms
z = qnorm(u)
# PITs (misspecified)
u2 = pnorm(y[(h+1):n], m = (a^h)*y[1:(n-h)], s = sqrt(aux + 0.2))
# Normal transforms
z2 = qnorm(u2)
rawmomtest(z, nm = 2)
rawmomtest(z2, nm = 2)
df = data.frame(a = rnorm(100), b = 2 + rnorm(100))
lm(df~1)
lm(as.matrix(df)~1)
library(sandwich)
# Test (a0 test by Knueppel)
# z is a sequence of normal transformed PITs
# nm is the highest moment order to be used
rawmomtest = function(z, nm = 4){
nm = 4 # Number of moments (must be even number)
odd = (1:nm)[seq(from = 1, by = 2, length.out = 0.5*nm)] # odd moments
ev = (1:nm)[seq(from = 2, by = 2, length.out = 0.5*nm)] # even moments
rm = c(0, 1, 0, 3, 0, 15, 0, 105) # Expected values for moments of N(0, 1)
stat = 0
dat = matrix(0, length(z), nm)
for (k in 1:nm){
dat[, k] = z^k - rm[k]
}
d1 = matrix(colMeans(dat[, odd]), 0.5*nm)
d2 = matrix(colMeans(dat[, ev]), 0.5*nm)
v1 = matrix(NeweyWest(lm(dat[, odd] ~ 1)), 0.5*nm, 0.5*nm)
v2 = matrix(NeweyWest(lm(dat[, ev] ~ 1)), 0.5*nm, 0.5*nm)
stat1 = t(d1) %*% solve(v1) %*% d1 # stat for odd moments
stat2 = t(d2) %*% solve(v2) %*% d2 # stat for even moments
stat = stat1 + stat2
pv = 1 - pchisq(stat, nm)
return(list(stat = stat, pvalue = pv, stat.odd = stat1, stat.even = stat2))
}
# Simulate data
n = 1000
h = 4
a = 0.8
s = 0.4
nz = n - h
e = s*rnorm(n)
y = c(0, rep(NA, n-1))
for (j in 2:n) y[j] = a*y[j-1] + e[j]
# PITs for correct forecasts
# Forecast variance
aux = sum((s^2) * (a ^ (0 : (h-1)))^2)
# PITs (correctly specified)
u = pnorm(y[(h+1):n], m = (a^h)*y[1:(n-h)], s = sqrt(aux))
# Normal transforms
z = qnorm(u)
# PITs (misspecified)
u2 = pnorm(y[(h+1):n], m = (a^h)*y[1:(n-h)], s = sqrt(aux + 0.2))
# Normal transforms
z2 = qnorm(u2)
rawmomtest(z, nm = 2)
rawmomtest(z2, nm = 2)
library(sandwich)
# Test (a0 test by Knueppel)
# z is a sequence of normal transformed PITs
# nm is the highest moment order to be used
rawmomtest = function(z, nm = 4){
nm = 4 # Number of moments (must be even number)
odd = (1:nm)[seq(from = 1, by = 2, length.out = 0.5*nm)] # odd moments
ev = (1:nm)[seq(from = 2, by = 2, length.out = 0.5*nm)] # even moments
rm = c(0, 1, 0, 3, 0, 15, 0, 105) # Expected values for moments of N(0, 1)
stat = 0
dat = matrix(0, length(z), nm)
for (k in 1:nm){
dat[, k] = z^k - rm[k]
}
d1 = matrix(colMeans(dat[, odd]), 0.5*nm)
d2 = matrix(colMeans(dat[, ev]), 0.5*nm)
v1 = matrix(NeweyWest(lm(dat[, odd] ~ 1)), 0.5*nm, 0.5*nm)
v2 = matrix(NeweyWest(lm(dat[, ev] ~ 1)), 0.5*nm, 0.5*nm)
stat1 = t(d1) %*% solve(v1) %*% d1 # stat for odd moments
stat2 = t(d2) %*% solve(v2) %*% d2 # stat for even moments
stat = stat1 + stat2
pv = 1 - pchisq(stat, nm)
return(list(stat = stat, pvalue = pv, stat.odd = stat1, stat.even = stat2))
}
# Simulate data
n = 1000
h = 4
a = 0.8
s = 0.4
nz = n - h
e = s*rnorm(n)
y = c(0, rep(NA, n-1))
for (j in 2:n) y[j] = a*y[j-1] + e[j]
# PITs for correct forecasts
# Forecast variance
aux = sum((s^2) * (a ^ (0 : (h-1)))^2)
# PITs (correctly specified)
u = pnorm(y[(h+1):n], m = (a^h)*y[1:(n-h)], s = sqrt(aux))
# Normal transforms
z = qnorm(u)
# PITs (misspecified)
u2 = pnorm(y[(h+1):n], m = (a^h)*y[1:(n-h)], s = sqrt(aux + 0.2))
# Normal transforms
z2 = qnorm(u2)
rawmomtest(z, nm = 6)
rawmomtest(z2, nm = 6)
install.packages("knitr")
library(knitr)
?knitr
set.seed(1)
x = rnorm(100)
mean(x)
library(knitr)
setwd("c:/users/Fabian/desktop/Coursera/")
dat <- read.csv("activity.csv", sep = ",")
dat$date <- as.Date(dat$date)
datComplete <- subset(dat, !is.na(steps))
# Sum of steps for every day in the complete sample
stepsPerDay <- aggregate(datComplete$steps, by = list(datComplete$date), FUN = sum)
# Rename the columns of the resulting data frame
names(stepsPerDay) <- c("date", "totalSteps")
# Sum of steps for every day in the imputed sample
stepsPerDayImpute <- aggregate(datImpute$steps, by = list(datImpute$date), FUN = sum)
# Rename the columns of the resulting data frame
names(stepsPerDayImpute) <- c("date", "totalSteps")
# Show summary statistics
summary(stepsPerDayImpute$totalSteps)
# Copy data frame, imputed values to be added
datImpute <- dat
# All intervals that occur in the sample
ints <- sort(unique(datComplete$interval))
# Loop over intervals
for (ii in ints){
datImpute$steps[is.na(dat$steps) & (dat$interval == ii)] <- subset(stepsPerInterval, interval == ii)$meanSteps
}
stepsPerInterval <- aggregate(datComplete$steps, by = list(datComplete$interval), FUN = mean)
# Rename columns of the data frame
names(stepsPerInterval) <- c("interval", "meanSteps")
# Copy data frame, imputed values to be added
datImpute <- dat
# All intervals that occur in the sample
ints <- sort(unique(datComplete$interval))
# Loop over intervals
for (ii in ints){
datImpute$steps[is.na(dat$steps) & (dat$interval == ii)] <- subset(stepsPerInterval, interval == ii)$meanSteps
}
# Sum of steps for every day in the imputed sample
stepsPerDayImpute <- aggregate(datImpute$steps, by = list(datImpute$date), FUN = sum)
# Rename the columns of the resulting data frame
names(stepsPerDayImpute) <- c("date", "totalSteps")
# Show summary statistics
summary(stepsPerDayImpute$totalSteps)
weekdays(stepsPerDayImpute$date)
str(weekdays(stepsPerDayImpute$date))
?by
weekday %in% c("Samstag", "Sonntag")
weekday <- weekdays(stepsPerDayImpute$date)
weekday
stepsPerDayImpute$weekend <- weekday %in% c("Samstag", "Sonntag")
str(stepsPerDayImpute)
rm(list=ls())
str(datImpute)
getwd()
purl("asgmt1.Rmd")
library(knitr)
purl("asgmt1.Rmd")
source("asgmt1.R")
purl("asgmt1.Rmd")
rm(list=ls())
source("asgmt1.R")
head(stepsPerInterval2)
aggregate(steps, by = list(interval, weekend), data = datImpute, FUN = mean)
?aggregate
purl("asmgt1.Rmd")
getwd()
purl("asgmt1.Rmd")
source("asgmt1.R")
rm(list=ls())
getwd()
knit2html("PA1_template.Rmd")
library(knitr)
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
setwd("../../GitHub/Coursera/")
setwd("../../GitHub/")
setwd("../../github/")
setwd("../../#")
setwd("../../")
getwd()
setwd("documets/github/coursera/")
setwd("documents/github/coursera/")
getwd()
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
